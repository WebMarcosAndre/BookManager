// <auto-generated />
using BookManager.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookManager.Infrastructure.Migrations
{
    [DbContext(typeof(BookManangerDbContext))]
    [Migration("20240729133419_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookManager.Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CodAu");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Autor", (string)null);
                });

            modelBuilder.Entity("BookManager.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CodL");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Edition")
                        .HasColumnType("int")
                        .HasColumnName("Edicao");

                    b.Property<string>("PublisherBook")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("Editora");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("Titulo");

                    b.Property<string>("YearPublication")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("AnoPublicacao");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Livro", (string)null);
                });

            modelBuilder.Entity("BookManager.Domain.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("codAs");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Assunto", (string)null);
                });

            modelBuilder.Entity("Livro_Assunto", b =>
                {
                    b.Property<int>("Assunto_CodAs")
                        .HasColumnType("int");

                    b.Property<int>("Livro_CodL")
                        .HasColumnType("int");

                    b.HasKey("Assunto_CodAs", "Livro_CodL");

                    b.HasIndex("Livro_CodL", "Assunto_CodAs");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Livro_CodL", "Assunto_CodAs"), false);

                    b.ToTable("Livro_Assunto", (string)null);
                });

            modelBuilder.Entity("Livro_Autor", b =>
                {
                    b.Property<int>("Autor_CodAu")
                        .HasColumnType("int");

                    b.Property<int>("Livro_CodL")
                        .HasColumnType("int");

                    b.HasKey("Autor_CodAu", "Livro_CodL");

                    b.HasIndex("Livro_CodL", "Autor_CodAu");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Livro_CodL", "Autor_CodAu"), false);

                    b.ToTable("Livro_Autor", (string)null);
                });

            modelBuilder.Entity("Livro_Assunto", b =>
                {
                    b.HasOne("BookManager.Domain.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("Assunto_CodAs")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Livro_Assunto_FKIndex1");

                    b.HasOne("BookManager.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("Livro_CodL")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Livro_Assunto_FKIndex2");
                });

            modelBuilder.Entity("Livro_Autor", b =>
                {
                    b.HasOne("BookManager.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("Autor_CodAu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Livro_Autor_FKIndex2");

                    b.HasOne("BookManager.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("Livro_CodL")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Livro_Autor_FKIndex1");
                });
#pragma warning restore 612, 618
        }
    }
}
